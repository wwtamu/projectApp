{
  "author": {
    "name": "basarat"
  },
  "name": "grunt-ts",
  "description": "Compile and manage your TypeScript project",
  "version": "3.0.0",
  "homepage": "https://github.com/grunt-ts/grunt-ts",
  "repository": {
    "type": "git",
    "url": "git@github.com:grunt-ts/grunt-ts.git"
  },
  "bugs": {
    "url": "https://github.com/grunt-ts/grunt-ts/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/grunt-ts/grunt-ts/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "maintainers": [
    {
      "name": "basarat",
      "email": "basaratali@gmail.com"
    },
    {
      "name": "jeffmay",
      "email": "viralidealogue@gmail.com"
    },
    {
      "name": "bartvds",
      "email": "bartvanderschoor@gmail.com"
    },
    {
      "name": "nycdotnet",
      "email": "steve.ognibene@outlook.com"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "typescript": "1.4.1",
    "chokidar": "0.12.5",
    "lodash": "2.4.1",
    "underscore": "1.5.1",
    "underscore.string": "2.3.3",
    "es6-promise": "~0.1.1",
    "rimraf": "2.2.6",
    "ncp": "0.5.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-continue": "0.0.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-debug-task": "^0.1.4",
    "grunt-tslint": "~0.4.0",
    "jshint-path-reporter": "~0.1.3",
    "source-map-support": "~0.2.5",
    "tslint-path-formatter": "~0.1.1"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript",
    "compiler"
  ],
  "contributors": [
    {
      "name": "Basarat Ali Syed",
      "email": "basaratali@gmail.com",
      "url": "http://www.basarat.com"
    },
    {
      "name": "Jeff May",
      "email": "viralidealogue@gmail.com",
      "url": "https://github.com/jeffmay"
    },
    {
      "name": "Bart van der Schoor",
      "email": "bartvanderschoor@gmail.com",
      "url": "https://github.com/Bartvds"
    }
  ],
  "readme": "# grunt-ts\r\n\r\n[![Build Status](https://secure.travis-ci.org/TypeStrong/grunt-ts.svg?branch=master)](http://travis-ci.org/TypeStrong/grunt-ts) [![NPM version](https://badge.fury.io/js/grunt-ts.svg)](http://badge.fury.io/js/grunt-ts)\r\n\r\n## TypeScript Compilation Task for GruntJS\r\n\r\nGrunt-ts is an npm package that handles TypeScript compilation work in GruntJS build scripts.  It provides a [Grunt-compatible wrapper](#support-for-tsc-switches) for the `tsc` command-line compiler, and provides some [additional functionality](#grunt-ts-gruntfilejs-options) that improves the TypeScript development workflow.  Grunt-ts is itself written in [TypeScript](./tasks/ts.ts).\r\n\r\n## Getting Started\r\n\r\nIf you've never used GruntJS on your computer, you should [follow the detailed instructions here](/docs/DetailedGettingStartedInstructions.md) to get Node.js and the grunt-cli working.  If you're a Grunt expert, simply follow these steps:\r\n\r\n * Run `npm install grunt-ts` in your project directory; this will install `grunt-ts`, TypeScript, and GruntJS.\r\n * Add the `ts` task in your `Gruntfile.js` (see below for a minimalist one).\r\n * Run `grunt` at the command line in your project folder to compile your TypeScript code.\r\n\r\nThis minimalist `Gruntfile.js` will compile `*.ts` files in all subdirectories of the project folder, excluding anything under `node_modules`:\r\n\r\n````javascript\r\nmodule.exports = function(grunt) {\r\n  grunt.initConfig({\r\n    ts: {\r\n      default : {\r\n        src: [\"**/*.ts\", \"!node_modules/**/*.ts\"]\r\n      }\r\n    }\r\n  });\r\n  grunt.loadNpmTasks(\"grunt-ts\");\r\n  grunt.registerTask(\"default\", [\"ts\"]);\r\n};\r\n````\r\n\r\nA more extensive sample `Gruntfile.js` is available [here](https://github.com/TypeStrong/grunt-ts/blob/master/sample/Gruntfile.js).\r\n\r\n## Grunt-ts Features\r\n\r\n * Allows use of all standard GruntJS functionality such as use of customizable task targets, globbing, use of the `files` object (for instantiating multiple independent `tsc` runs in a single target), etc.\r\n * Allows the developer to [select a custom TypeScript compiler version](#compiler) for their project, or even use a custom (in-house) version.\r\n * Supports [most switches](#support-for-tsc-switches) of the `tsc` TypeScript Compiler via options in the gruntfile `ts` task, and also supports switch overrides per-target.\r\n * Provides a [transforms](#transforms) feature that eases code refactoring by taking the burden of relative path maintenance off the developer. If the paths to a set of files changes, grunt-ts will regenerate the relevant sections.  This feature supports:\r\n   * External module [import transforms](#import-transform) by file name, aliasing, directories, indexed directories, and re-exported imports.\r\n   * Internal module [reference maintenance](#references)\r\n   * Common [reference file](#reference) management\r\n * Allows [concatenation](#out) where supported by the TypeScript compiler's `--out` switch\r\n * [Encodes HTML](#html) files as TypeScript variables (for HTML templating engines)\r\n * Performs live file [watching](#watch) (compile on save)\r\n * Enables [\"Fast\" compile](#fast) when using external modules\r\n\r\n## Support for tsc Switches\r\n\r\nGrunt-ts supports most `tsc` switches.  Click the link to cross-reference to the grunt-ts option.\r\n\r\n|`tsc` switch|grunt-ts analogue|description|\r\n|:----:|:----:|:-----|\r\n| --declaration|[declaration](#declaration)|Generates a `.d.ts` definitions file for compiled TypeScript files|\r\n|--mapRoot LOCATION|[mapRoot](#maproot)|Specifies the location where debugger should locate map files instead of generated locations.|\r\n|--module KIND|[module](#module)|Specify module style for code generation|\r\n|--noImplicitAny|[noImplicitAny](#noimplicitany)|Warn on expressions and declarations with an implied `any` type.|\r\n|--noResolve|[noResolve](#noresolve)|Skip resolution and preprocessing (deprecated)|\r\n|--out FILE|[out](#out)|Concatenate and emit output to a single file.|\r\n|--outDir DIRECTORY|[outDir](#outdir)|Redirect output structure to the directory.|\r\n|--preserveConstEnums|[preserveConstEnums](#preserveconstenums)|Const enums will be kept as enums in the emitted JS.|\r\n|--removeComments|[removeComments](#removecomments)|Configures if comments should be included in the output|\r\n|--sourceMap|[sourceMap](#sourcemap)|Generates corresponding `.map` file|\r\n|--sourceRoot LOCATION|[sourceRoot](#sourceroot)|Specifies the location where debugger should locate TypeScript files instead of source locations.|\r\n|--suppressImplicitAnyIndexErrors|[suppressImplicitAnyIndexErrors](#suppressimplicitanyindexerrors)|Specifies the location where debugger should locate TypeScript files instead of source locations.|\r\n|--target VERSION|[target](#target)|Specify ECMAScript target version: `'es3'`, `'es5'`, or `'es6'`|\r\n\r\n\r\nFor file ordering, look at [JavaScript Generation](#javascript-generation).\r\n\r\n## grunt-ts gruntfile.js options\r\n\r\n|property|where to define|description|\r\n|:----|:----|:-----|\r\n|[comments](#comments)|option|`true`, `false` (default) - include comments in emitted JS.|\r\n|[compile](#compile)|option|`true` (default), `false` - compile TypeScript code.|\r\n|[compiler](#compiler)|option|`string` - path to custom compiler|\r\n|[declaration](#declaration)|option|`true`, `false` (default) - indicates that definition files should be emitted.|\r\n|[failOnTypeErrors](#failontypeerrors)|option|`true` (default), `false` - fail Grunt pipeline if there is a type error|\r\n|[fast](#fast)|option|`'watch'` (default), `'always'`, `'never'` - how to decide on a \"fast\" grunt-ts compile.|\r\n|[files](#files)|target|Sets of files to compile and optional output destination|\r\n|[html](#html)|target|`string` or `string[]` - glob to HTML templates|\r\n|[htmlModuleTemplate](#htmlmoduletemplate)|option|`string` - HTML template namespace|\r\n|[htmlVarTemplate](#htmlvartemplate)|option|`string` - HTML property name|\r\n|[mapRoot](#maproot)|option|`string` - root for referencing `.js.map` files in JS|\r\n|[module](#module)|option|`'amd'` (default) or `'commonjs'` - specifies external module style|\r\n|[noImplicitAny](#noimplicitany)|option|`true`, `false` (default) - enable for stricter type checking|\r\n|[noResolve](#noresolve)|option|`true`, `false` (default) - for deprecated version of TypeScript|\r\n|[options](#grunt-ts-target-options)|target||\r\n|[out](#out)|target|`string` - instruct `tsc` to concatenate output to this file.|\r\n|[outDir](#outdir)|target|`string` - instruct `tsc` to emit JS to this directory.|\r\n|[preserveConstEnums](#preserveconstenums)|option|`true`, `false` (default) - If true, const enums will be kept as enums in the emitted JS.|\r\n|[reference](#reference)|target|`string` - tells grunt-ts which file to use for maintaining references|\r\n|[removeComments](#removecomments)|option|`true` (default), `false` - removes comments in emitted JS|\r\n|[sourceRoot](#sourceroot)|option|`string` - root for referencing TS files in `.js.map`|\r\n|[sourceMap](#sourcemap)|option|`true` (default), `false` - indicates if source maps should be generated (`.js.map`)|\r\n|[suppressImplicitAnyIndexErrors](#suppressimplicitanyindexerrors)|option|`false` (default), `true` - indicates if TypeScript should allow access to properties of an object by string indexer when `--noImplicitAny` is active, even if TypeScript doesn't know about them.|\r\n|[src](#src)|target|`string` or `string[]` - glob of TypeScript files to compile.|\r\n|[target](#target)|option|`'es5'` (default), `'es3'`, or `'es6'` - targeted ECMAScript version|\r\n|[verbose](#verbose)|option|`true`, `false` (default) - logs `tsc` command-line options to console|\r\n|[watch](#watch)|target|`string` - will watch for changes in the specified directory or below|\r\n\r\n\r\nNote: In the above chart, if \"where to define\" is \"target\", the property must be defined on a target or on the `ts` object directly.  If \"where to define\" is \"options\", then the property must be defined on an `options` object on `ts` or on a target under `ts`.\r\n\r\n\r\n### grunt-ts target properties\r\n\r\n#### dest\r\n\r\nGrunt-ts does not support the GruntJS standard `dest` target property.  Instead, you should use [files](#files), [out](#out), or [outDir](#outdir).\r\n\r\n#### files\r\nGrunt-ts supports use of the GruntJS-centric `files` property on a target as an alternative to the `tsc`-centric use of `src` and `out`/`outDir`.\r\n\r\nNotes:\r\n* The `fast` grunt-ts option is not supported in this configuration. You should specify `fast: 'never'` to avoid warnings when `files` is used.\r\n* It is not supported to specify an array of values for `dest` with grunt-ts.  A warning will be issued to the console.  If a non-empty array is passed, the first element will be used and the rest will be truncated.\r\n* If the `dest` parameter ends with \".js\", the value will be passed to the `--out` parameter of the TypeScript compiler.  Otherwise, if there is a non-blank value, it will be passed to the `--outDir` parameter.\r\n* If you intend to pass the specific value \"src\" to the TypeScript `--outDir` parameter, specify it as \"src/\" in the dest parameter to avoid grunt-ts warnings.\r\n\r\nHere are some examples of using the target `files` property with grunt-ts:\r\n\r\n````js\r\ngrunt.initConfig({\r\n  ts: {\r\n    compileTwoSetsOfFilesUsingArrayStyle: {\r\n      // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be\r\n      // passed to tsc with the --out switch as 'out/ArrayStyle/1.js'.\r\n      // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-array-format\r\n      files: [{ src: ['files1/**/*.ts'], dest: 'out/ArrayStyle/1.js' },\r\n              { src: ['files2/**/*.ts'], dest: 'out/ArrayStyle/2.js' }],\r\n      options: {\r\n        fast: 'never'\r\n      }\r\n    },\r\n    compileTwoSetsOfFilesToDirUsingArrayStyle: {\r\n      // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be\r\n      // passed to tsc with the --outDir switch as 'out/ArrayStyle'.\r\n      // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-array-format\r\n      files: [{ src: ['files1/**/*.ts'], dest: 'out/ArrayStyle' },\r\n              { src: ['files2/**/*.ts'], dest: 'out/ArrayStyle' }],\r\n      options: {\r\n        fast: 'never'\r\n      }\r\n    },\r\n    compileTwoSetsOfFilesUsingObjectStyle: {\r\n      // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be\r\n      // passed to tsc with the --out switch as 'out/ObjectStyle/1.js'.\r\n      // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-object-format\r\n      files: {\r\n        'out/ObjectStyle/1.js': ['files1/**/*.ts'],\r\n        'out/ObjectStyle/2.js': ['files2/**/*.ts']\r\n      },\r\n      options: {\r\n        fast: 'never'\r\n      }\r\n    },\r\n    compileTwoSetsOfFilesToDirUsingObjectStyle: {\r\n      // This will run tsc once.  The result of the globs will be passed to tsc with the\r\n      // --outDir switch as 'out/ObjectStyle'.\r\n      // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-object-format\r\n      files: {\r\n        'out/ObjectStyle': ['files1/**/*.ts','files2/**/*.ts']\r\n        },\r\n        options: {\r\n          fast: 'never'\r\n        }\r\n      }\r\n    }\r\n});\r\n````\r\n\r\n#### html\r\n\r\nGrunt-ts supports compilation of `.html` file content to TypeScript variables which is explained in detail [here](/docs/html2ts.md).  The `html` target property acts similarly to `src`, except that it searches for html files to convert to TypeScript variables.  See also [htmlModuleTemplate](#htmlmoduletemplate) and [htmlVarTemplate](#htmlvartemplate).\r\n\r\n````javascript\r\n// How to use the html target property (incomplete example)\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      html: [\"templates/**/*.html\"]\r\n    }\r\n  }\r\n});\r\n````\r\n\r\nNote: the `html` compilation functionality will not fire if the `src` property is not specified.  If you wish to only have the HTML compile to TypeScript without compiling the resulting `.ts` files to JavaScript, make sure they're excluded from the `src` globs, or else specify an empty `src` array alongside the `html` task property, and set the target `compile` option to `false`:\r\n\r\n````javascript\r\n// Example of how to compile html files to TypeScript without compiling the resulting\r\n// .ts files to JavaScript.\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      html: [\"templates/**/*.html\"],\r\n      src: [],\r\n      options: {\r\n        compile: false\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n\r\n#### options\r\n\r\nThis section allows global configuration for the grunt-ts task.  All [target-specific options](#grunt-ts-target-options) are supported.  If a target also has options set, the target's options override the global task options.\r\n\r\n<!--\r\n#### nolib\r\n\r\nSpecify this option if you do not want the lib.d.ts to be loaded by the TypeScript compiler.\r\n-->\r\n\r\n#### out\r\n\r\nPasses the --out switch to `tsc`.  This will cause the emitted JavaScript to be concatenated to a single file if your code allows for that.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      out: \"dist/myscript.js\"\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n*Warning:* Using the compiler with `out` and `reference` will prevent  grunt-ts from using its fast compile feature.  Consider using external modules with transforms instead.\r\n\r\n#### outDir\r\n\r\nPasses the --outDir switch to `tsc`.  This will redirect the emitted JavaScript to the specified directory and subdirectories.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      outDir: \"dist\"\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### reference\r\n\r\nGrunt-ts can generate a reference TypeScript file which will contains a reference to all other found `.ts` files.\r\n\r\nThis means that the developer will not need to cross-reference files manually; instead they can just reference `reference.ts`.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      reference: \"references.ts\"\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n*Warning:* Using the compiler with `out` and `reference` will prevent  grunt-ts from using its fast compile feature.  Consider using external modules with transforms instead.\r\n\r\n#### src\r\n\r\nAllows you to specify the TypeScript files that will be passed to the compiler.  Supports standard GruntJS functionality such as globbing.  More info at Configuring GruntJS Tasks](http://gruntjs.com/configuring-tasks#files).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      src: [\"app/**/*.ts\"]\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### watch\r\n\r\nGrunt-ts can watch a directory and recompile TypeScript files when any TypeScript or HTML file is changed, added, or removed. Use the `watch` *target* option specifying a target directory that will be watched.  All subdirectories are automatically included.\r\n\r\nNote: this feature does not allow for additional tasks to run after the compilation step is done - for that you should use `grunt-contrib-watch`.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      watch: \".\"  //will re-run this task if any .ts or .html file is changed.\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n### grunt-ts target options\r\n\r\n#### compile\r\n\r\n````javascript\r\ntrue (default)| false\r\n````\r\n\r\nIndicates if the TypeScript compilation should be attempted.  Turn this off if you wish to just run transforms.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        compile: false\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### compiler\r\n\r\nThis target option allows the developer to select an alternate TypeScript compiler.\r\n\r\nBy default, `grunt-ts` will use the TypeScript compiler that came bundled with it.  Alternate compilers can be used by this target option (for custom compiler builds) or using `package.json` (for npm released version of `typescript`).\r\n\r\nTo use a custom compiler, update your gruntfile.js file with this code:\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      compiler: './node_modules/grunt-ts/customcompiler/tsc'\r\n    }\r\n  }\r\n});\r\n````\r\n\r\nDownload custom compilers from the current [TypeScript repository on GitHub](https://github.com/Microsoft/TypeScript/releases) or the old [TypeScript repository on CodePlex](http://typescript.codeplex.com/releases) and extract it to a folder in your project.  The compiler will be in the `bin` folder.  Copy all of the files to your project folder and then reference `tsc` using the `compiler` task option.  For example, if you extracted everything to a `mycompiler` folder in your project, you'd set the grunt-ts `compiler` property to `'./mycompiler/tsc'`.\r\n\r\nIn the absence of a compiler argument, `grunt-ts` will look for an alternate compiler in its *peer* `node_modules` folder (where `grunt-ts` and `typescript` are peers).\r\n\r\nThe `package.json` would look something like this for a legacy project:\r\n\r\n```javascript\r\n{\r\n  \"devDependencies\": {\r\n    \"grunt\" : \"~0.4.1\",\r\n    \"grunt-ts\" : \"~1.9.2\",\r\n    \"typescript\" : \"0.9.7\"\r\n  }\r\n}\r\n```\r\nNote: It is safest to pin the exact TypeScript version (do not use `~` or `>`).\r\n\r\n\r\n\r\n#### noResolve\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\n*Deprecated:* Grunt-ts supports passing this parameter to legacy versions of `tsc`.  It will pass `--noResolve` on the command line.\r\n\r\n#### comments\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nRetains comments in the emitted JavaScript if set to `true`.  Removes comments if set to `false`.  Note that if `comments` and `removeComments` are both used, the value of `removeComments` will win; regardless, please don't do this as it is just confusing to everyone.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      comments: true //preserves comments in output.\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### removeComments\r\n\r\n````javascript\r\ntrue (default)| false\r\n````\r\n\r\nRemoves comments in the emitted JavaScript if set to `true`.  Preserves comments if set to `false`.  Note that if `comments` and `removeComments` are both used, the value of `removeComments` will win; regardless, please don't do this as it is just confusing to everyone.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      removeComments: false //preserves comments in output.\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### declaration\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nGenerates corresponding .d.ts file(s) for compiled TypeScript files.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      declaration: true\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### failOnTypeErrors\r\n\r\n````javascript\r\ntrue (default) | false\r\n````\r\n\r\nTypeScript has two types of errors: emit preventing and non-emit preventing.  Generally, type errors do not prevent the JavaScript emit.  Therefore, it can be useful to allow the Grunt pipeline to continue even if there are type errors because `tsc` will still generate JavaScript.\r\n\r\nIf `failOnTypeErrors` is set to `false`, grunt-ts will not halt the Grunt pipeline if a TypeScript type error is encountered.  Note that syntax errors or other general `tsc` errors will always halt the pipeline.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      failOnTypeErrors: true\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### fast\r\n\r\n````javascript\r\n\"watch\" (default) | \"always\" | \"never\"\r\n````\r\n\r\nIf you are using *external modules*, grunt-ts will try to do a `fast` compile **by default**, basically only compiling what's changed. It should \"just work\" with the built-in file watching as well as with external tools like `grunt-contrib-watch`.\r\n\r\nTo do a fast compile, grunt-ts maintains a cache of hashes for TypeScript files in the `.tscache` folder to detect changes (needed for external watch tool support).  It also creates a `.baseDir.ts` file at the root, passing it to the compiler to make sure that `--outDir` is always respected in the generated JavaScript.\r\n\r\nYou can [customize the behaviour](https://github.com/grunt-ts/grunt-ts/blob/master/docs/fast.md) of grunt-ts `fast`.\r\n\r\nIf you are using `files`, grunt-ts can't do a fast compile.  You should set `fast` to 'never'.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    options: {\r\n      // disable the grunt-ts fast feature\r\n      fast: 'never'\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### htmlModuleTemplate\r\n\r\nGrunt-ts supports compilation of `.html` file content to TypeScript variables which is explained in detail [here](/docs/html2ts.md).  The `htmlModuleTemplate` target property allows the developer to define a namespace for the templates.  See also [html](#html) and [htmlVarTemplate](#htmlvartemplate).\r\n\r\n````javascript\r\n//Note: incomplete - combine with html and htmlVarTemplate\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        //MyTemplate.html will be accessible as HtmlTemplates.MyTemplate\r\n        htmlModuleTemplate: 'HtmlTemplates.<%= filename %>'\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### htmlVarTemplate\r\n\r\nGrunt-ts supports compilation of `.html` file content to TypeScript variables which is explained in detail [here](/docs/html2ts.md).  The `htmlVarTemplate` target property allows the developer to define a property name for the template contents.  See also [html](#html) and [htmlModuleTemplate](#htmlmoduletemplate).\r\n\r\n````javascript\r\n//Note: incomplete - combine with html and htmlModuleTemplate\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        //HTML template objects will expose their content via a property called markup.\r\n        htmlVarTemplate: 'markup'\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### mapRoot\r\n\r\nSpecifies the root for where `.js.map` sourcemap files should be referenced.  This is useful if you intend to move your `.js.map` files to a different location.  Leave this blank or omit entirely if the `.js.map` files will be deployed to the same folder as the corresponding `.js` files.  See also [sourceRoot](#sourceroot).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        //When abc.ts is compiled to abc.js, it will reference /maps/abc.js.map\r\n        mapRoot: \"/maps\"\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### module\r\n\r\n````javascript\r\n\"amd\" (default) | \"commonjs\" | \"\"\r\n````\r\n\r\nSpecifies if TypeScript should emit AMD or CommonJS-style external modules.  Has no effect if internal modules are used.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        module: \"amd\"\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### noEmitOnError\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nSet to true to pass `--noEmitOnError` to the compiler.  If set to true, TypeScript will not emit JavaScript if there is a type error.  This flag does not affect the Grunt pipeline; to force the Grunt pipeline to continue (or halt) in the presence of TypeScript type errors, see [failOnTypeErrors](#failontypeerrors).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        noEmitOnError: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### noImplicitAny\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nSet to true to pass `--noImplicitAny` to the compiler.  Requires more strict type checking.  If `noImplicitAny` is enabled, TypeScript will raise a type error whenever it is unable to infer the type of a variable.  By default, grunt-ts will halt the Grunt pipeline on type errors.  See [failOnTypeErrors](#failontypeerrors) for more info.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        noImplicitAny: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### preserveConstEnums\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nSet to true to pass `--preserveConstEnums` to the compiler.  If set to true, TypeScript will emit code that allows other JavaScript code to use the enum.  If false (the default), TypeScript will inline the enum values as magic numbers with a comment in the emitted JS.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        preserveConstEnums: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### sourceMap\r\n\r\n````javascript\r\ntrue (default) | false\r\n````\r\n\r\nIf true, grunt-ts will instruct `tsc` to emit source maps (`.js.map` files).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        sourceMap: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### sourceRoot\r\n\r\nThe sourceRoot to use in the emitted source map files.  Allows mapping moved `.js.map` files back to the original TypeScript files.  See also [mapRoot](#maproot).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        sourceRoot: \"/dev\"\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n\r\n#### suppressImplicitAnyIndexErrors\r\n\r\n````javascript\r\ntrue | false (default)\r\n````\r\n\r\nSet to true to pass `--suppressImplicitAnyIndexErrors` to the compiler.  If set to true, TypeScript will allow access to properties of an object by string indexer when `--noImplicitAny` is active, even if TypeScript doesn't know about them.  This setting has no effect unless `--noImplicitAny` is active.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        suppressImplicitAnyIndexErrors: true,\r\n        noImplicitAny: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\nFor example, the following code would not compile with `--noImplicitAny` alone, but it would be legal with `--noImplicitAny` and `--suppressImplicitAnyIndexErrors` both enabled:\r\n\r\n````typescript\r\ninterface person {\r\n    name: string;\r\n}\r\n\r\nvar p : person = { name: \"Test\" };\r\np[\"age\"] = 101;  //property age does not exist on interface person.\r\nconsole.log(p[\"age\"]);\r\n````\r\n\r\n#### target\r\n\r\n````javascript\r\n\"es5\" (default) | \"es3\" | \"es6\"\r\n````\r\n\r\nAllows the developer to specify if they are targeting ECMAScript version 3, 5, or 6.  Support for `es6` emit was added in TypeScript 1.4 and is listed as experimental.  Only select ES3 if you are targeting old browsers (IE8 or below).  The default for grunt-ts (es5) is different than the default for `tsc` (es3).\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        target: \"es3\" //for IE8 and below\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n#### verbose\r\n\r\n````javascript\r\nfalse (default) | true\r\n````\r\n\r\nWill print the switches passed to `tsc` on the console.  Helpful for debugging.\r\n\r\n````javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    default: {\r\n      options: {\r\n        verbose: true\r\n      }\r\n    }\r\n  }\r\n});\r\n````\r\n\r\n### Transforms\r\n\r\nObjective : To allow easier code refactoring by taking the relative path maintenance burden off the developer. If the paths to the files changes `grunt-ts` will regenerate the relevant sections.\r\n\r\nTransforms begin with a three-slash comment `///` and are prefixed with `ts:`\r\n\r\nYou can also run transforms without compiling your code by setting `compile: false` in your config. For example:\r\n```javascript\r\ngrunt.initConfig({\r\n  ts: {\r\n    \"transforms-only\": {\r\n      options: {\r\n        compile: false\r\n      },\r\n      // in addition to your standard settings:\r\n      // src: ...\r\n      // outDir: ...\r\n    },\r\n    // ...\r\n  }\r\n} );\r\n```\r\n\r\n#### Import Transform\r\n\r\n```typescript\r\n///ts:import=<fileOrDirectoryName>[,<variableName>]\r\n```\r\n\r\nThis will generate the relevant `import foo = require('./path/to/foo');` code without you having to figure out the relative path.\r\n\r\nIf a directory is provided, the entire contents of the directory will be imported. However if a directory has a file `index.ts` inside of it, then instead of importing the entire folder only `index.ts` is imported.\r\n\r\n##### Examples\r\n\r\nImport file:\r\n```typescript\r\n///ts:import=filename\r\nimport filename = require('../path/to/filename'); ///ts:import:generated\r\n```\r\n\r\nImport file with an alternate name:\r\n```typescript\r\n///ts:import=BigLongClassName,foo\r\nimport foo = require('../path/to/BigLongClassName'); ///ts:import:generated\r\n```\r\n\r\nImport directory:\r\n```typescript\r\n///ts:import=directoryName\r\nimport filename = require('../path/to/directoryName/filename'); ///ts:import:generated\r\nimport anotherfile = require('../path/to/directoryName/deeper/anotherfile'); ///ts:import:generated\r\n...\r\n```\r\n\r\nImport directory that has an `index.ts` file in it:\r\n```typescript\r\n///ts:import=directoryName\r\nimport directoryName = require('../path/to/directoryName/index'); ///ts:import:generated\r\n```\r\n> See Exports for examples of how grunt-ts can generate an `index.ts` file for you\r\n\r\n#### Export Transform\r\n\r\n```typescript\r\n///ts:export=<fileOrDirectoryName>[,<variableName>]\r\n```\r\n\r\nThis is similar to `///ts:import` but will generate `export import foo = require('./path/to/foo');` and is very useful for generating indexes of entire module directories when using external modules (which you should **always** be using).\r\n\r\n##### Examples\r\n\r\nExport file:\r\n```typescript\r\n///ts:export=filename\r\nexport import filename = require('../path/to/filename'); ///ts:export:generated\r\n```\r\n\r\nExport file with an alternate name:\r\n```typescript\r\n///ts:export=filename,foo\r\nexport import foo = require('../path/to/filename'); ///ts:export:generated\r\n```\r\n\r\nExport directory:\r\n```typescript\r\n///ts:export=dirName\r\nexport import filename = require('../path/to/dirName/filename'); ///ts:export:generated\r\nexport import anotherfile = require('../path/to/dirName/deeper/anotherfile'); ///ts:export:generated\r\n...\r\n```\r\n\r\n#### References\r\n\r\n```typescript\r\n///ts:ref=<fileName>\r\n```\r\n\r\nThis will generate the relevant `/// <references path=\"./path/to/foo\" />` code without you having to figure out the relative path.\r\n\r\n##### Examples\r\n\r\nReference file:\r\n```typescript\r\n///ts:ref=filename\r\n/// <reference path='../path/to/filename'/> ///ts:ref:generated\r\n```\r\n\r\n### JavaScript Generation\r\n\r\nWhen a output file is specified via `out` in combination with a reference file via `reference` then grunt-ts uses the generated reference file to *order the code in the generated JavaScript*.\r\n\r\nUse `reference.ts` to specify the order for the few files the build really cares about and leave the rest to be maintained by grunt-ts.\r\n\r\nE.g. in the following case the generated JavaScript for `someBaseClass.ts` is guaranteed to be at the top, and the generated JavaScript for `main.ts` is guaranteed to be at the bottom of the single merged `js` file.\r\n\r\nEverything between `grunt-start` and `grunt-end` is generated and maintained by grunt-ts. If there is no `grunt-start` section found, it is created. If `reference.ts` does not exist originally, it is also created.\r\n\r\n````typescript\r\n/// <reference path=\"someBaseClass.ts\" />\r\n\r\n// Put comments here and they are preserved\r\n\r\n//grunt-start\r\n/// <reference path=\"autoreference.ts\" />\r\n/// <reference path=\"someOtherFile.ts\" />\r\n//grunt-end\r\n\r\n\r\n/// <reference path=\"main.ts\" />\r\n````\r\n\r\n### Standardizing Line Endings\r\n\r\nAs of grunt-ts v2.0.2, If you wish to standardize the line endings used by grunt-ts transforms, you can set the `grunt.util.linefeed` property in your gruntfile.js to the desired standard line ending for the grunt-ts managed TypeScript files.\r\n\r\n````javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.util.linefeed = '\\r\\n';  // this would standardize on CRLF\r\n\r\n  /* rest of config */\r\n};\r\n````\r\n\r\nNote that it is not currently possible to force TypeScript to emit all JavaScript with a particular line ending, but a switch to allow that is under discussion here: https://github.com/Microsoft/TypeScript/issues/1693\r\n\r\n\r\n## Video Examples\r\n**TypeScript programming using grunt-ts (YouTube):**\r\n\r\n<a href=\"https://youtu.be/Km0DpfX5ZxM\" target=\"_blank\" alt=\"TypeScript programming using grunt-ts\"><img src=\"https://img.youtube.com/vi/Km0DpfX5ZxM/0.jpg\" /></a>\r\n\r\n**AngularJS + TypeScript : Workflow with grunt-ts (YouTube)**\r\n\r\n<a href=\"https://youtu.be/0-6vT7xgE4Y\" target=\"_blank\" alt=\"AngularJS + TypeScript : Workflow\"><img src=\"https://img.youtube.com/vi/0-6vT7xgE4Y/0.jpg\" /></a>\r\n\r\n## Contributing\r\n\r\nWith npm and grunt-cli installed, run the following from the root of the repository:\r\n\r\n```bash\r\n$ npm install\r\n```\r\n### Building the project:\r\n\r\nTo build all\r\n\r\n```bash\r\n$ grunt build\r\n```\r\n### Running the tests:\r\n\r\nTo test all\r\n\r\n```bash\r\n$ grunt test\r\n```\r\n\r\n### Before PR\r\n\r\n```bash\r\n$ grunt release\r\n```\r\n\r\nIt runs `build` followed by `test`. This is also the default task. You should run this before sending a PR.\r\n\r\n### Development\r\n\r\nYou will probably be working and testing a particular feature. Modify `tasksToTest` in our `Gruntfile.js` and run:  \r\n\r\n```bash\r\n$ grunt dev\r\n```\r\n\r\nIt will watch your changes (to `grunt-ts` task as well as examples) and run your tasksToTest after updating the task (if any changes detected).\r\n\r\n### Additional commands\r\nUpdate the current `grunt-ts` to be the last known good version (dogfood). Commit message should be `Update LKG`.\r\n\r\n```bash\r\n$ grunt upgrade\r\n```\r\n\r\n### Publishing Checklist\r\n\r\n * Run `grunt release` and ensure it comes back clean (should finish but with warnings).\r\n * Update the version in package.json.\r\n * Update CHANGELOG.md.\r\n * Commit to master.\r\n * Publish to npm.\r\n * Push version tag to GitHub.\r\n\r\n## License\r\n\r\nLicensed under the MIT License.\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ts@3.0.0",
  "_from": "grunt-ts@^3.0.0"
}
